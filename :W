#include<stdio.h>
#include<vector>
using namespace std;

const int MAX_N = 100000;
long long int MAX = 0;

struct edge_t
{
	int v;
	int w;
public:
	edge_t(int v, int w) : v(v), w(w) {}
};

vector<edge_t> tree[MAX_N];

int dfs(int index, from ){
	if( tree[index].size() == 1 ){
		return from;
	}
	int max1 = 0;
	int max2 = 0;
	for( int i = 0; i < tree[index].size(); ++i ){
		if( tree[index][i].v != i ){
			continue;
		}
		dfs( tree[index][i].v, tree[index][i].w );
	}
	// 
	return 0;
}


int main(){
	int N;
	scanf("%d",&N);
	for( int i = 0; i < N; ++i ){
		int num;
		scanf("%d",&num);
		while(true){
			int a,b;
			scanf("%d",&a);
			if( a == -1 ){
				break;
			}
			scanf("%d",&b);
			tree[num-1].push_back({a-1, b});
		}
	}
	dfs(0);
	
	/*
	for( int j = 0; j < N; ++j ){
		for( int i = 0; i < tree[j].size(); ++i ){
			printf("%d %d %d\n",j,tree[j][i].v,tree[j][i].w);
		}
	}
	*/
	printf("%lld\n",MAX);
	return 0;
}
